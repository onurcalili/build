diff --git a/drivers/spi/spi-sun4i.c b/drivers/spi/spi-sun4i.c
index 3296f24f2..6ff49586a 100644
--- a/drivers/spi/spi-sun4i.c
+++ b/drivers/spi/spi-sun4i.c
@@ -103,6 +103,8 @@ static inline u32 sun4i_spi_get_tx_fifo_count(struct sun4i_spi *sspi)
 
 	reg >>= SUN4I_FIFO_STA_TF_CNT_BITS;
 
+	pr_err("sun4i_spi_get_tx_fifo_count addr : 0x%X val : %d", sspi->base_addr, reg & SUN4I_FIFO_STA_TF_CNT_MASK);
+
 	return reg & SUN4I_FIFO_STA_TF_CNT_MASK;
 }
 
@@ -110,7 +112,12 @@ static inline void sun4i_spi_enable_interrupt(struct sun4i_spi *sspi, u32 mask)
 {
 	u32 reg = sun4i_spi_read(sspi, SUN4I_INT_CTL_REG);
 
+	pr_err("sun4i_spi_enable_interrupt 1 addr : 0x%X val : %d", sspi->base_addr, reg);
+
 	reg |= mask;
+
+	pr_err("sun4i_spi_enable_interrupt 2 addr : 0x%X val : %d", sspi->base_addr, reg);
+
 	sun4i_spi_write(sspi, SUN4I_INT_CTL_REG, reg);
 }
 
@@ -118,7 +125,12 @@ static inline void sun4i_spi_disable_interrupt(struct sun4i_spi *sspi, u32 mask)
 {
 	u32 reg = sun4i_spi_read(sspi, SUN4I_INT_CTL_REG);
 
+	pr_err("sun4i_spi_disable_interrupt 1 addr : 0x%X val : %d", sspi->base_addr, reg);
+
 	reg &= ~mask;
+
+	pr_err("sun4i_spi_disable_interrupt 2 addr : 0x%X val : %d", sspi->base_addr, reg);
+
 	sun4i_spi_write(sspi, SUN4I_INT_CTL_REG, reg);
 }
 
@@ -127,6 +139,8 @@ static inline void sun4i_spi_drain_fifo(struct sun4i_spi *sspi, int len)
 	u32 reg, cnt;
 	u8 byte;
 
+	pr_err("sun4i_spi_drain_fifo addr : 0x%X", sspi->base_addr);
+
 	/* See how much data is available */
 	reg = sun4i_spi_read(sspi, SUN4I_FIFO_STA_REG);
 	reg &= SUN4I_FIFO_STA_RF_CNT_MASK;
@@ -147,6 +161,8 @@ static inline void sun4i_spi_fill_fifo(struct sun4i_spi *sspi, int len)
 	u32 cnt;
 	u8 byte;
 
+	pr_err("sun4i_spi_fill_fifo addr : 0x%X", sspi->base_addr);
+
 	/* See how much data we can fit */
 	cnt = SUN4I_FIFO_DEPTH - sun4i_spi_get_tx_fifo_count(sspi);
 
@@ -164,6 +180,8 @@ static void sun4i_spi_set_cs(struct spi_device *spi, bool enable)
 	struct sun4i_spi *sspi = spi_master_get_devdata(spi->master);
 	u32 reg;
 
+	pr_err("sun4i_spi_set_cs addr : 0x%X", sspi->base_addr);
+
 	reg = sun4i_spi_read(sspi, SUN4I_CTL_REG);
 
 	reg &= ~SUN4I_CTL_CS_MASK;
@@ -198,6 +216,8 @@ static void sun4i_spi_set_cs(struct spi_device *spi, bool enable)
 
 static size_t sun4i_spi_max_transfer_size(struct spi_device *spi)
 {
+	struct sun4i_spi *sspi = spi_master_get_devdata(spi->master);
+	pr_err("sun4i_spi_max_transfer_size addr : 0x%X", sspi->base_addr);
 	return SUN4I_FIFO_DEPTH - 1;
 }
 
@@ -212,6 +232,8 @@ static int sun4i_spi_transfer_one(struct spi_master *master,
 	int ret = 0;
 	u32 reg;
 
+	pr_err("sun4i_spi_transfer_one addr : 0x%X", sspi->base_addr);
+
 	/* We don't support transfer larger than the FIFO */
 	if (tfr->len > SUN4I_MAX_XFER_SIZE)
 		return -EMSGSIZE;
@@ -351,6 +373,8 @@ static irqreturn_t sun4i_spi_handler(int irq, void *dev_id)
 	struct sun4i_spi *sspi = dev_id;
 	u32 status = sun4i_spi_read(sspi, SUN4I_INT_STA_REG);
 
+	pr_err("sun4i_spi_handler addr : 0x%X", sspi->base_addr);
+
 	/* Transfer complete */
 	if (status & SUN4I_INT_CTL_TC) {
 		sun4i_spi_write(sspi, SUN4I_INT_STA_REG, SUN4I_INT_CTL_TC);
@@ -391,6 +415,8 @@ static int sun4i_spi_runtime_resume(struct device *dev)
 	int ret;
 	u32 reg;
 
+	pr_err("sun4i_spi_runtime_resume addr : 0x%X", sspi->base_addr);
+
 	ret = clk_prepare_enable(sspi->hclk);
 	if (ret) {
 		dev_err(dev, "Couldn't enable AHB clock\n");
@@ -407,6 +433,29 @@ static int sun4i_spi_runtime_resume(struct device *dev)
 	sun4i_spi_write(sspi, SUN4I_CTL_REG,
         reg | SUN4I_CTL_ENABLE | SUN4I_CTL_MASTER | SUN4I_CTL_TP);
 
+	reg = sun4i_spi_read(sspi, SUN4I_RXDATA_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_RXDATA_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_TXDATA_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_TXDATA_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_CTL_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_CTL_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_INT_CTL_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_INT_CTL_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_INT_STA_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_INT_STA_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_DMA_CTL_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_DMA_CTL_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_WAIT_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_WAIT_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_CLK_CTL_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_CLK_CTL_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_BURST_CNT_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_BURST_CNT_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_XMIT_CNT_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_XMIT_CNT_REG VAL : 0x%X\n", sspi->base_addr, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_FIFO_STA_REG);
+	dev_info(dev, "SPI Resume: 0x%X SUN4I_FIFO_STA_REG VAL : 0x%X\n", sspi->base_addr, reg);
+
 	return 0;
 
 err:
@@ -420,6 +469,8 @@ static int sun4i_spi_runtime_suspend(struct device *dev)
 	struct spi_master *master = dev_get_drvdata(dev);
 	struct sun4i_spi *sspi = spi_master_get_devdata(master);
 
+	pr_err("sun4i_spi_runtime_suspend addr : 0x%X", sspi->base_addr);
+
 	clk_disable_unprepare(sspi->mclk);
 	clk_disable_unprepare(sspi->hclk);
 
@@ -431,6 +482,7 @@ static int sun4i_spi_probe(struct platform_device *pdev)
 	struct spi_master *master;
 	struct sun4i_spi *sspi;
 	int ret = 0, irq;
+	u32 reg;
 
 	master = spi_alloc_master(&pdev->dev, sizeof(struct sun4i_spi));
 	if (!master) {
@@ -508,6 +560,29 @@ static int sun4i_spi_probe(struct platform_device *pdev)
 		goto err_pm_disable;
 	}
 
+	reg = sun4i_spi_read(sspi, SUN4I_RXDATA_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_RXDATA_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_TXDATA_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_TXDATA_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_CTL_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_CTL_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_INT_CTL_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_INT_CTL_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_INT_STA_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_INT_STA_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_DMA_CTL_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_DMA_CTL_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_WAIT_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_WAIT_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_CLK_CTL_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_CLK_CTL_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_BURST_CNT_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_BURST_CNT_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_XMIT_CNT_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_XMIT_CNT_REG VAL : 0x%X\n", pdev->resource->start, reg);
+	reg = sun4i_spi_read(sspi, SUN4I_FIFO_STA_REG);
+	dev_info(&pdev->dev, "SPI : 0x%X SUN4I_FIFO_STA_REG VAL : 0x%X\n", pdev->resource->start, reg);
+
 	return 0;
 
 err_pm_disable:
